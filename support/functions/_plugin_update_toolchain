#!/bin/bash

#simplebuild_plugin tcupdate

tcupdate(){
	pversion="0.13.0";
	pname="s3.TUP";
	pdesc="Plugin $pname v$pversion";
	configname="$configdir/plugin_update_toolchain.config";
	ctdir="$sdir/crosstool";
	ctsrcdir="$ctdir/crosstool-ng";
	cttpldir="$ctdir/templates";
	fngsrcdir="$ctdir/freetz-ng";
	cpus="$(getconf _NPROCESSORS_ONLN)";

	CMDTC="$1";
	OPTION1="$2";
	OPTION2="$3";
	[ -z "$4" ] && FLAG="0" || FLAG="$4"; #1 - tcupdate call from s3 main menu, 2 - tcupdate call from s3 toolchain menu;
	tc="$CMDTC";
	
	#check/install prerequisites
	[ -d "$ctdir/source" ] && mv -f "$ctdir/source" "$ctsrcdir"; #rename folder for compatibility with pre 0.13.x releases
	clear && _check_pkg;

	#backup config
	if [ "$CMDTC" == "-r" ] || [ "$CMDTC" == "--reset" ];then
		if [ -f "$configname" ];then
			if ! _check_github_api_limits 12;then
				echo -e "$y_l""RESET -> Moving existing config file...""$re_";
				bcn="$configname".$(date +"%Y%m%d%H%M%S");
				mv "$configname" "$bcn"
				echo -e "config file backup='$bcn'\n";
			else
				_paktc_timer 30;
			fi;
		fi;
		CMDTC="";
	fi;
	
	#create config
	if [ ! -f "$configname" ];then
		echo -e "$g_l""CLEANUP -> Creating new config file. Please wait...""$y_l""$re_";
		if ! _create_config;then
			exit;
		else
			echo -e "config file='$configname'\nYou can change/extend them to fit your needs.\n";
		fi;
		_paktc_timer 5;
	fi;
	
	#change config value's
	if [ "$CMDTC" == "-cfg" ] || [ "$CMDTC" == "--config" ];then
		_change_config "$OPTION1" "$OPTION2";
		[ "$FLAG" == "1" ] && return || bye;
	fi;
	
	#load config	
	source "$configname";
	
	#check config
	_check_config;
	
	#ct-ng must not be run as root unless you forcing it by config
	if ! _check_root || [ "$CTNG_BUILD_AS_ROOT" == "1" ];then
		CTNG_START_BUILD=1;
	else
		CTNG_START_BUILD=0;
		sp=$(printf '%*s' 9);
		CTNG_ROOT_BUILD_ERROR="\nERROR -> The cross toolchain build process was aborted because it must not run as root!\n\n""$sp""If you are aware of the danger of building toolchains as root and you\n""$sp""know what you are doing, you can force it with the following command:\n\n";
		CTNG_ROOT_BUILD_CMD="$sp""./s3 tcupdate --config \"CTNG_BUILD_AS_ROOT\" \"1\"\n";
	fi;

	if [ "$CMDTC" == "-c" ] || [ "$CMDTC" == "--create" ];then	#start toolchain builder menu
		_create_tc "$OPTION1" "" "$FLAG";
		[ "$FLAG" == "1" ] && return || bye;
	elif [ "$CMDTC" == "-s" ] || [ "$CMDTC" == "--setup" ];then	#setup crosstool-NG
		_create_tc "" "$CMDTC" "$FLAG";
		bye;
	elif [ "$CMDTC" == "-b" ] || [ "$CMDTC" == "--backup" ];then #backup toolchain
		if _check_toolchain "$OPTION1";then
			_backup "$OPTION1" "$OPTION1" >/dev/null;
			[ "$FLAG" == "1" ] && return || bye;
		else
			_nl && [ "$FLAG" == "1" ] && sleep 2 && return || exit;
		fi;
	elif [ "$CMDTC" == "-d" ] || [ "$CMDTC" == "--duplicate" ];then #duplicate toolchain
		if _check_toolchain "$OPTION1";then
			! _check_toolchain "$OPTION2" && _toolchain_repair "$(_backup "$OPTION1" "$OPTION2")" || echo -e "\n\n$r_l  $txt_error:$y_l $OPTION2$w_l Toolchain already exists!""$rs_" && _nl && exit;
			bye;
		else
			_nl && exit;
		fi;
	elif [ "$CMDTC" == "-ctng" ] || [ "$CMDTC" == "--crosstool-ng" ];then #croostool-NG menu
		_ctng_menu "$OPTION1";
		bye;
	elif [ "$CMDTC" == "-fng" ] || [ "$CMDTC" == "--freetz-ng" ];then #croostool-NG menu
		_fng_menu "$OPTION1";
		bye;
	elif [ -z "$CMDTC" ];then
		unset menu_close;
		while [ ! $menu_close ]
		do
			#TOOLCHAIN MENU
			_fill_tc_array;
			unset MENU_OPTIONS;COUNT=0
			if [ "$systype" == "ok" ];then
				if [ "$tcempty" == "0" ];then
					for i in "${INST_TCLIST[@]}";do
						if [ ! "$i" == "native" ];then
							source "$tccfgdir/$i" && tcdate="";
							[ -f "$tcdir/$i/build.log.bz2" ] && tcdate=" ct-ng."$(date -r "$tcdir/$i/build.log.bz2" "+%F %T");
							[ -f "$tcdir/$i/freetz-ng.log.bz2" ] && tcdate=" freetz-ng."$(date -r "$tcdir/$i/freetz-ng.log.bz2" "+%F %T");
							MENU_OPTIONS+=("$_toolchainname" "$_description\Z2$tcdate\Zn" "toolchain folder:$tcdir/$i | config file:$tccfgdir/$i");
							counter;
						fi;
					done;
				fi;
				[ $COUNT -eq 0 ] && MENU_OPTIONS+=("" "no toolchains found" "no toolchains found") && counter;
			fi;
			clear;clear;
			out=$("$gui" "$st_" "$bt_" "$title_ - \Z0$pdesc\Zn" "--colors" "--item-help" "--help-tags" "--default-item" "$tc" "--ok-label" "Update" "--cancel-label" "Create" "--help-button" "--help-label" "Backup" "--extra-button" "--extra-label" "$([ ! "$FLAG" == "1" ] && echo "Exit" || echo "Back")" "--title" "-[ Toolchain Menu ]-" \
				--menu "\nSelect one of the installed tool chains that you want to update:\n " \
				"${COUNT+10}" 0 0 "${MENU_OPTIONS[@]}");
			ret="$?";
			[ $ret -eq 2 ] && tc=$(echo "$out" | awk '{printf $2}') || tc=$(echo "$out" | awk '{printf $1}');

			case $ret in
				0) #Update toolchain
					menu_close="1";;
				1) #Start crosstool-NG
					_create_tc "" "" "1";;
				2) #Backup toolchain
					_check_toolchain $tc && _backup "$tc" "$tc" >/dev/null || [ -z "$CMDTC" ] && sleep 2 && tcupdate "$CMDTC" "$OPTION1" "$OPTION2" "$FLAG" || _nl && exit;
					sleep 2;;
				3) #Exit
					[ "$FLAG" == "1" ] && return || bye;;
			esac;
		done;
	fi;

	#toolchain native not supported and exists check
	if ! _check_toolchain $tc;then
		[ -z "$CMDTC" ] && sleep 2 && tcupdate "$CMDTC" "$OPTION1" "$OPTION2" "$FLAG" || _nl && [ "$FLAG" == "1" ] || [ "$FLAG" == "2" ] && sleep 2 && return || exit;
	fi;
	
	#load toolchain config
	[ -f "$tccfgdir/$tc" ] && source "$tccfgdir/$tc";
	cd "$tcdir/$tc/bin";

	#autodetect toolchain's sysroot, prefix, include
	compilername="$_compiler""gcc";compilername=$(realpath -s $compilername);
	ranlibname="$_compiler""ranlib";ranlibname=$(realpath -s $ranlibname);
	hostname=${_compiler%?};
	incdir=$(realpath -s $(echo | "$compilername" -Wp,-v -xc - -fsyntax-only 2>&1 | grep include$ | tail -n 1 | xargs))
	sr=$("$compilername" -print-sysroot 2>/dev/null);
	sr=$(realpath -sm "$sr" 2>/dev/null);
	if [ ${#sr} -gt ${#tcdir} ];then
		[ -d "$sr/include" ] && cd "$sr"
		[ -d "$sr/usr/include" ] && [ ! "$(realpath $(readlink -- "$PWD") 2>/dev/null)" == "$(realpath "$sr/usr")" ] && cd "$sr/usr" #Ignore symlinks to the same directory
	else
		cd "$tcdir/$tc/$_sysroot"
	fi;
	prefixdir="$PWD"
	
	[ "$FLAG" == "1" ] && backxit=1 || backxit=$menu_close;
	unset menu_close;
	while [ ! $menu_close ]
	do
		#autodetect toolchain's pkgconfig folder
		pkg=$(find * | grep -m1 "/pkgconfig") && pkgdir="$prefixdir/$pkg" || pkgdir="$prefixdir";
		cd "$prefixdir"
		#LIBRARY UPDATE MENU
		unset MENU_OPTIONS;COUNT=0;unset libs;
		for i in "${LIBS[@]}"
		do
			[ "${!i}" == "0" ] && continue;
			libkey=$i;
			libname="$i"_name;libname=${!libname};
			libversion="$i"_version;libversion=${!libversion};
			libdesc="$i"_desc;libdesc=${!libdesc};
			[ ${#libdesc} -eq 0 ] && libdesc="$libname $libversion";
			libcheck="$i"_check;libcheck=${!libcheck};
			libversioncheck=$(echo "$libcheck" | awk '{printf $2}')
			libcheck=$(echo "$libcheck" | awk '{printf $1}')
			liburl="$i"_url;liburl=${!liburl};
			libversioncurrent=$(_get_version "$pkgdir/$libcheck" "$libversioncheck");
			libversioncompare=$(_compare_version $libversion $(echo $libversioncurrent | sed -e 's/^$/0.0.0/g'));
			libtasks="$i"_tasks[@];libtasks=("${!libtasks}");
			libexports="$i"_exports[@];libexports=("${!libexports}");
			libconfigure="$i"_configure[@];libconfigure=("${!libconfigure}");
			libmake="$i"_make[@];libmake=("${!libmake}");

			#Preselection and formatting
			[ "$libversioncompare" == "=" ] && libtxtfmt="\Z2" || libtxtfmt="";
			[ "$libversioncompare" == "<" ] && libtxtfmt="\Z1";
			[ "$libversioncompare" == ">" ] && [ ${#libversioncurrent} -gt 0 ] && libselected="on" && libtxtfmt="\Z5" || libselected="off";
			
			MENU_OPTIONS+=("$i"		"$libdesc""$(printf '%*s' $((24-${#libdesc})))""$libtxtfmt$([ $libversioncurrent ] && echo $libversioncompare)	$(echo $libversioncurrent | sed -e 's/^$/ ---/g')\Zn"		"$(echo $libselected)"	"$([ $libname ] && echo "$libdesc: $liburl")");counter;

			#     0 key     1 desc     2 version     3 checkversion     4 checkfile 5 current version    6 url      7 tasks array
			lib=("$libkey" "$libname" "$libversion" "$libversioncheck" "$libcheck" "$libversioncurrent" "$liburl" "(${libtasks[*]@Q})");
			libs+=("(${lib[*]@Q})");
		done;
		[ $COUNT -eq 0 ] && MENU_OPTIONS+=("" "no libraries found" "no libraries found") && counter;

		if [ ${#OPTION1} -gt 0 ];then #Force build library call
			opts=$(echo "$OPTION1" | tr ',' '\n');
			ret="0";
		else
			clear;clear;
			opts=$("$gui" "--item-help" "--help-tags" "$st_" "$bt_" "$title_ - \Z0$pdesc\Zn" "--colors" "--default-item" "$lkey" "--ok-label" "Start" "--help-button" "--help-label" "Info" "--cancel-label" "$([ "$backxit" == "1" ] && echo "Back" || echo "Exit")" "--title" "-[ Library Update Menu - \Z2$tc\Zn ]-" "$cl_"\
				"\nSelect all libraries to update in toolchain's SYSROOT folder:\n$prefixdir\n\n         library   version NEW                   CURRENT" \
				"${COUNT+12}" 70 0 "${MENU_OPTIONS[@]}");
			ret="$?"
		fi;

		#SSL select check
		[ $(echo $opts | tr ' ' '\n' | grep -c "SSL_") -gt 1 ] && echo -e $r_l"\n\nPlease select only one SSL version!"$re_ && sleep 3 && [ ${#OPTION1} -gt 0 ] && menu_close=1 && continue;

		case $ret in
			0) #Start - Build library
				ts=$(date +%F.%H%M%S);
				tmpdir="/tmp/lib_source/$ts";
				icount=$(echo $opts | wc -w);i=0;
				for o in $opts;do
					unset buildtasks;
					for l in "${libs[@]}";do
						declare -a lib="${l[*]}";				#populate libs array element
						[ ! "$o" == "${lib[0]}" ] && continue || ((i++));
						logfile="$ldir/"$ts"_tup_"$_toolchainname"_"${lib[1]}"_"${lib[2]}".log"

						#generate build command list
						declare -a libtasks="${lib[7]}";		#populate tasks array element
						for task in "${libtasks[@]}";do
							task=$(_replace_tokens "$task");	#replace tokens
							buildtasks+=("$task");
						done
						_build "($i/$icount) $tc: library ${lib[1]} ${lib[2]}" $(_extract $(_dl "${lib[6]}" "${lib[1]} ${lib[2]}") "$tmpdir" 2>/dev/null) "$logfile" "${buildtasks[@]}";
					done;
					[ "${#buildtasks[@]}" == "0" ] && echo -e "$r_l  $txt_error:$y_l $o$w_l Library not found in config file""$rs_";
				done;
				[ -d "$tmpdir" ] && rm -r "$tmpdir";;
			1) #Exit/Back
				menu_close="1";;
			2) #Info
				first=$(echo "$opts" | awk '{printf $1}');
				lkey=$(echo "$opts" | awk '{printf $2}');

				if [ "$first" == "HELP" ];then
					sp=$(printf '%*s' 90 | tr ' ' '=');
					txt=$(cat "$configname" | grep ""$lkey"=\|"$lkey"_");
					bcd=$(cat "$configname" | grep ""$lkey"_tasks");
					txt=$(echo -e "Toolchain: $tcdir/$tc\nCompiler:  $compilername\nSysroot:   $sr\nPrefix:    $prefixdir\nInclude:   $incdir\n$sp\n\nLibrary configuration:\n$txt\n\nBuild command:\n$(_replace_tokens "$(_tidy_tasks "$bcd" "$lkey")")");
					tempfile=$(mktemp) && echo -e "$txt" > "$tempfile";
					"$gui" "$st_" "$nc_" "$bt_" "$title_ - \Z0$pdesc\Zn" "--colors" "--ok-label" "Back" "--textbox" "$tempfile" 30 80;
					rm "$tempfile" 2>/dev/null;
				fi;;
		esac;
		
		#Exit loop if build library is forced
		[ ${#OPTION1} -gt 0 ] && menu_close=1;
	done;
	
	#Reopen previous menu
	[ ${#OPTION1} -gt 0 ] && exit;
	[ "$FLAG" == "2" ] && return;
	if [ ${#opts} -gt 0 ];then
		tcupdate "$tc" "$OPTION1" "$OPTION2" "$backxit";
	else
		[ "$backxit" == "1" ] && tcupdate "" "$OPTION1" "$OPTION2" "$FLAG" || bye;
	fi;
};
_create_tc(){
	_sz;					# Prepare DIALOG settings

	local menu_close;
	while [ ! $menu_close ]
	do
		if [ ${#2} -gt 0 ];then #Force setup call
			ret="1";
		elif [ ${#1} -gt 0 ];then #Force build toolchain call
			opts="$1";
			ret="0";
		else #Show Template Menu
			tplempty=0;
			[ ! -d "$cttpldir" ] && mkdir --parents "$cttpldir";
			cd "$cttpldir";

			if [ "$(ls -A "$cttpldir")" ];then
				TPL_LIST=(*);
			else
				tplempty=1;
			fi;
			
			#CROSS TOOLCHAIN TEMPLATE MENU
			unset MENU_OPTIONS;COUNT=0;
			if [ "$tplempty" == "0" ];then
				for t in "${TPL_LIST[@]}";do
					desc=$(_get_template_properties "$t")
					[ -d "$tcdir/$t" ] && [ -f "$tccfgdir/$t" ] && color="\Z1" || color="";
					MENU_OPTIONS+=("$t" "$color$desc\Zn" "off" "template filename:$cttpldir/$t");counter;
					counter;
				done;
			fi;
			
			[ $COUNT -eq 0 ] && MENU_OPTIONS+=("" "no templates found" "no templates found") && counter;
			clear;clear;
			opts=$("$gui" "$st_" "$bt_" "$title_ - \Z0$pdesc\Zn" "--colors" "--item-help" "--help-tags" "--default-item" "$tpl" "--ok-label" "Start" "--extra-button" "--extra-label" "$([ ! "$3" == "1" ] && echo "Exit" || echo "Back")" "--cancel-label" "Setup" "--help-button" "--help-label" "Edit" "--title" "-[ Cross Toolchain Template Menu ]-" "$cl_"\
				 "\nSelect on of the templates to create the cross toolchain you want:\n\n\Z1NOTE: If you create a cross toolchain from a template with a red colored description, an existing one with the same name will be replaced without asking!\Zn" \
				 "${COUNT+11}" 0 0 "${MENU_OPTIONS[@]}");
			ret="$?";
		fi;

		case $ret in
			0) #Start - Build cross toolchain
				#Setup crosstool-NG and Freetz-NG automatically if not installed
				_check_crosstool_setup;

				#Build cross toolchains
				icount=$(echo $opts | wc -w);i=0;
				for tpl in $opts;do
					if [ -f "$cttpldir/$tpl" ];then

						logfile="$ldir/$(date +%F.%H%M%S)_tup_crosstoolchain_"$tpl".log"; ((i++)); 

						clear;
						sp=$(printf '%*s' 80 | tr ' ' '=')
						echo -e "$pdesc - creating cross toolchain log - $(date +"%F %T")" | tee -a "$logfile";
						echo -e "$y_l$sp\nbuild ($i/$icount): command list for cross toolchain $tpl:\n$sp" | tee -a "$logfile";

						#copy template
						[ $(_get_template_type "$cttpldir/$tpl") == "CTNG" ] && tpltargetdir="$ctsrcdir";
						[ $(_get_template_type "$cttpldir/$tpl") == "FNG" ]  && tpltargetdir="$fngsrcdir";
						echo "rm \"$tpltargetdir/.config\"* 2>/dev/null;cp -f \"$cttpldir/$tpl\" \"$tpltargetdir/.config\";" | tee -a "$logfile";
						rm "$tpltargetdir/.config"* 2>/dev/null;cp -f "$cttpldir/$tpl" "$tpltargetdir/.config";

						#patch template
						if [ $(_get_template_type "$cttpldir/$tpl") == "CTNG" ];then
							#CT_LOCAL_TARBALLS_DIR aka cache folder for downloads
							echo "sed -i \"s#.*CT_LOCAL_TARBALLS_DIR=.*#CT_LOCAL_TARBALLS_DIR=\"$dldir\"#g\" \"$tpltargetdir/.config\";" | tee -a "$logfile";
							sed -i "s#.*CT_LOCAL_TARBALLS_DIR=.*#CT_LOCAL_TARBALLS_DIR=\"$dldir\"#g" "$tpltargetdir/.config";
							#CT_PREFIX_DIR aka folder that contains the final toolchain
							echo "sed -i \"s#.*CT_PREFIX_DIR=.*#CT_PREFIX_DIR=\"$tcdir/$tpl\"#g\" \"$tpltargetdir/.config\";" | tee -a "$logfile";
							sed -i "s#.*CT_PREFIX_DIR=.*#CT_PREFIX_DIR=\"$tcdir/$tpl\"#g" "$tpltargetdir/.config";
							#CT_PARALLEL_JOBS aka parallel task count for building
							echo "echo -e \"\nCT_PARALLEL_JOBS=$cpus\" >>\"$tpltargetdir/.config\";" | tee -a "$logfile";
							echo -e "\nCT_PARALLEL_JOBS=$cpus" >>"$tpltargetdir/.config";
							#CT_ALLOW_BUILD_AS_ROOT aka force build as root
							_check_root && [ "$CTNG_BUILD_AS_ROOT" == "1" ] && echo "echo -e \"\nCT_EXPERIMENTAL=y\nCT_ALLOW_BUILD_AS_ROOT=y\nCT_ALLOW_BUILD_AS_ROOT_SURE=y\" >>\"$tpltargetdir/.config\";" | tee -a "$logfile";
							_check_root && [ "$CTNG_BUILD_AS_ROOT" == "1" ] && echo -e "\nCT_EXPERIMENTAL=y\nCT_ALLOW_BUILD_AS_ROOT=y\nCT_ALLOW_BUILD_AS_ROOT_SURE=y" >>"$tpltargetdir/.config";
						elif [ $(_get_template_type "$cttpldir/$tpl") == "FNG" ];then
							#FREETZ_JLEVEL aka parallel task count for building
							echo "echo -e \"\FREETZ_JLEVEL=$cpus\" >>\"$tpltargetdir/.config\";" | tee -a "$logfile";
							echo -e "\nFREETZ_JLEVEL=$cpus" >>"$tpltargetdir/.config";
						fi;

						#run build
						[ $(_get_template_type "$cttpldir/$tpl") == "CTNG" ] && bcl=$(printf '%s\n' "${CTNG_BUILD_tasks[@]}");
						[ $(_get_template_type "$cttpldir/$tpl") == "FNG" ]  && bcl=$(printf '%s\n' "${FNG_BUILD_tasks[@]}");
						echo -e "cd \"$tpltargetdir\";\n$(_replace_tokens "$bcl")\n$sp""$re_" | tee -a "$logfile";
						sleep 2;

						if [ $CTNG_START_BUILD -eq 1 ];then
							cd "$tpltargetdir";
							#print out crosstool version
							[ $(_get_template_type "$cttpldir/$tpl") == "CTNG" ] && echo -e "$g_l\n$(./ct-ng | grep 'crosstool-NG version' &2>/dev/null | tail -1)\n""$re_" | tee -a "$logfile";
							[ $(_get_template_type "$cttpldir/$tpl") == "FNG" ]  && echo -e "$g_l\n$(tools/freetz-revision 2>&1 | tail -1)\n""$re_" | tee -a "$logfile";

							#generate build command list
							unset buildtasks;
							if [ $(_get_template_type "$cttpldir/$tpl") == "CTNG" ];then
								for task in "${CTNG_BUILD_tasks[@]}";do
									task=$(_replace_tokens "$task");	#replace tokens
									buildtasks+=("$task");
								done;
							elif [ $(_get_template_type "$cttpldir/$tpl") == "FNG" ];then
								[[ ! $(umask) == 0022 ]] && umask 0022;
								for task in "${FNG_BUILD_tasks[@]}";do
									task=$(_replace_tokens "$task");	#replace tokens
									buildtasks+=("$task");
								done;
							fi;
							( eval "${buildtasks[@]}" ) 2>&1;
							[ $(_get_template_type "$cttpldir/$tpl") == "CTNG" ] && err=$(grep -c '\[ERROR\]' "$tpltargetdir/build.log");
							[ $(_get_template_type "$cttpldir/$tpl") == "FNG" ]  && err=$(grep 'Error .*' "$logfile" | grep -vc '(ignored)');
							
							#save build.log in logs
							[ $(_get_template_type "$cttpldir/$tpl") == "CTNG" ] && cat "$tpltargetdir/build.log" >>"$logfile";

							if [ ! $err -gt 0 ];then
								if [ $(_get_template_type "$cttpldir/$tpl") == "CTNG" ];then
									#get target from build.log
									target=$(sed -n -e '/target = / s/.*\= *//p' "$tpltargetdir/build.log");

									#get CT_BUILD_TOP_DIR aka temporary toolchain build directory from build.log and delete it to save disk space
									buildtopdir=$(sed -n -e '/CT_BUILD_TOP_DIR=\// s/.*\= *//p' "$tpltargetdir/build.log");
									[ -d "$buildtopdir" ] && rm -rf "$buildtopdir" 2>/dev/null;
								elif [ $(_get_template_type "$cttpldir/$tpl") == "FNG" ];then
									#get toolchain and target from logfile
									btcbindir=$(grep -i '{ PATH=.*kernel.*' "$logfile" | head -n 1 | awk -F':|"' '{print $2}');
									btcdir=$(realpath "$btcbindir/../");
									target=$(basename "$btcdir");
									
									#copy toolchain folder
									rm -rf "$tcdir/$tpl";
									cp -rf "$btcdir" "$tcdir/$tpl";
									
									#compress log file
									cp -f "$logfile" "$tcdir/$tpl/freetz-ng.log";
									bzip2 -zf9 "$tcdir/$tpl/freetz-ng.log";
								fi;
								
								#compress toolchain
								_compress "$dldir/Toolchain-$tpl.tar.xz" "$tcdir/$tpl" | "$gui" "$st_" "$bt_" "$title_ - \Z0$pdesc\Zn" "--colors" "--title" " -[ Compress cross toolchain $tpl to Toolchain-$tpl.tar.xz ]- " "$pb_" "$_lines" "$_cols";
								
								#create toolchain.cfg
								desc=$(_get_template_properties "$cttpldir/$tpl");
								_create_toolchaincfg "$tcdir/$tpl" "$tpl" "$target" "" "" "$desc" "" "$dldir/Toolchain-$tpl.tar.xz" "yes";
							else
								_paktc_timer 10;
							fi;
						else
							echo -e "$r_l""$CTNG_ROOT_BUILD_ERROR""$y_l""$CTNG_ROOT_BUILD_CMD""$re_" | tee -a "$logfile";
							_paktc_timer 10;
						fi;
					else
						echo -e "$r_l  $txt_error:$y_l $tpl$w_l Template $txt_n_installed""$rs_";
						sleep 2;
					fi;
				done;;
			1) #Setup - Setup crosstool-NG
				_ctng_setup "$CTNG_START_BUILD";
				_fng_setup "$CTNG_START_BUILD";;
			2) #Edit
				tpl=$(echo "$opts" | awk '{printf $2}';);
				[ $(_get_template_type "$cttpldir/$tpl") == "CTNG" ] && _ctng_menu "$tpl";
				[ $(_get_template_type "$cttpldir/$tpl") == "FNG" ]  && _fng_menu "$tpl";;
			3)	#Exit
				menu_close="1";
				return;;
		esac;
		
		#Exit loop if setup or build toolchain are forced
		[ ${#2} -gt 0 ] || [ ${#1} -gt 0 ] && menu_close=1;
		
	done;
};
_backup(){

	_sz;					# Prepare DIALOG settings
	src=$1;
	dest=$2;
	newtccfgfile="$tccfgdir/$dest";
	xzfile="$dldir/Toolchain-$dest.tar.xz";
	
	(
	#compress toolchain
	_compress "$xzfile" "$tcdir/$src"
	
	#create toolchain.cfg
	source "$tccfgdir/$src" && target="${_compiler%?}" && sysroot="$_sysroot" && lsd="$_libsearchdir" && desc="$_description" && info="$_tc_info" && sb="$_self_build";
	_create_toolchaincfg "$tcdir/$src" "$dest" "$target" "$sysroot" "$lsd" "$desc" "$info" "$xzfile" "$sb";
	) | "$gui" "$st_" "$bt_" "$title_ - \Z0$pdesc\Zn" "--colors" "--title" " -[ Backup $src to $(basename "$xzfile") ]- " "$pb_" "$_lines" "$_cols";
	[ -f "$newtccfgfile" ] && echo "$dest";
};
_build(){
	_sz;					# Prepare DIALOG settings
	local desc="$1";		# Save 1. argument in a variable
	local libsrcdir="$2";	# Save 2. argument in a variable
	local lf="$3";			# Save 3. argument in a variable
	shift && shift && shift;# Shift all 3. arguments to the left (original $1,$2,$3 gets lost)
	local tasks=("$@"); 	# Rebuild the array with rest of arguments

	(	
	bcl=$(printf '%s\n' "${tasks[@]}");
	
	sp=$(printf '%*s' 80 | tr ' ' '=')
	echo -e "$pdesc - updating library log - $(date +"%F %T")" | tee -a "$lf";
	echo -e "$sp\nbuild command list for $desc:\n$sp\ncd "$libsrcdir\;"\n$bcl\n$sp" | tee -a "$lf";
	sleep 2;
	cd "$libsrcdir";
	( eval "${tasks[@]}" ) 2>&1 | tee -a "$lf"
	) | "$gui" "$st_" "$bt_" "$title_ - \Z0$pdesc\Zn" "--colors" "--title" " -[ Build $desc ]- " "$pb_" "$_lines" "$_cols";sleep 2;
	
	#build error message
	error_on_build=$(grep -cw1 Error "$lf");
	if [ "$error_on_build" -gt "0" ];then
		echo -e ""$r_l"ERRORS on build found, details:\n$b_l  $lf\n$y_l" >$(tty);
		_paktc_timer 10;
		echo -e "$re_$w_l";
	fi;
	
};
_ctng_menu(){
	tc="$1";tpl="$tc";unset configtasks;

	if [ -f "$cttpldir/$tpl" ];then #copy the existing template to edit it
		cp -f "$cttpldir/$tpl" "$ctsrcdir/.config"
	elif [ -n "$tpl" ];then #create an empty template
		[ -f "$ctsrcdir/.config" ] && rm "$ctsrcdir/.config"* 2>/dev/null;
		touch "$ctsrcdir/.config";
	else #use existing (self copied) template
		[ ! -f "$ctsrcdir/.config" ] && touch "$ctsrcdir/.config";
		tc="_test$(( $RANDOM % 100 ))";tpl="$tc";
	fi;

	cd "$ctsrcdir";
	for task in "${CTNG_CONFIG_tasks[@]}";do
		task=$(_replace_tokens "$task");	#replace tokens
		configtasks+=("$task");
	done;
	( eval "${configtasks[@]}" ) 2>&1;
};
_fng_menu(){
	tc="$1";tpl="$tc";unset configtasks;

	if [ -f "$cttpldir/$tpl" ];then #copy the existing template to edit it
		cp -f "$cttpldir/$tpl" "$fngsrcdir/.config"
	elif [ -n "$tpl" ];then #create an empty template
		[ -f "$fngsrcdir/.config" ] && rm "$fngsrcdir/.config"* 2>/dev/null;
		touch "$fngsrcdir/.config";
	else #use existing (self copied) template
		[ ! -f "$fngsrcdir/.config" ] && touch "$fngsrcdir/.config";
		tc="_test$(( $RANDOM % 100 ))";tpl="$tc";
	fi;

	cd "$fngsrcdir";
	for task in "${FNG_CONFIG_tasks[@]}";do
		task=$(_replace_tokens "$task");	#replace tokens
		configtasks+=("$task");
	done;
	( eval "${configtasks[@]}" ) 2>&1;
};
_ctng_setup(){
	logfile="$ldir/$(date +%F.%H%M%S)_tup_ctng_setup.log";
	unset setuptasks;
	(
	bcl=$(printf '%s\n' "${CTNG_SETUP_tasks[@]}");
	sp=$(printf '%*s' 80 | tr ' ' '=')
	echo -e "$pdesc - installing crosstool-ng log - $(date +"%F %T")";
	echo -e "$sp\nbuild command list for crosstool-NG:\n$sp\ncd "$ctsrcdir"\n$(_replace_tokens "$bcl")\n$sp";
	sleep 2;
	
	if [ $1 -eq 1 ];then
		# setup crosstool wc
		echo "Cleanup source directory "$ctsrcdir/"..."
		rm -rf "$ctsrcdir" 2>/dev/null;
		mkdir --parents "$ctsrcdir";
		cd "$ctsrcdir";
		#generate setup command list
		for task in "${CTNG_SETUP_tasks[@]}";do
			task=$(_replace_tokens "$task");	#replace tokens
			setuptasks+=("$task");
		done
		( eval "${setuptasks[@]}" ) 2>&1;
	else
		echo -e "$CTNG_ROOT_BUILD_ERROR$CTNG_ROOT_BUILD_CMD";
		sleep 5;
	fi;
	) | tee "$logfile" | "$gui" "$st_" "$bt_" "$title_ - \Z0$pdesc\Zn" "--colors" "--title" " -[ Setup crosstool-NG ]- " "$pb_" "$_lines" "$_cols";
};
_fng_setup(){
	logfile="$ldir/$(date +%F.%H%M%S)_tup_fng_setup.log";
	unset setuptasks;
	(
	bcl=$(printf '%s\n' "${FNG_SETUP_tasks[@]}");
	sp=$(printf '%*s' 80 | tr ' ' '=')
	echo -e "$pdesc - installing freetz-ng log - $(date +"%F %T")";
	echo -e "$sp\nbuild command list for Freetz-NG:\n$sp\ncd "$fngsrcdir"\n$(_replace_tokens "$bcl")\n$sp";
	sleep 2;
	
	if [ $1 -eq 1 ];then
		# setup freetz-ng wc
		echo "Cleanup source directory "$fngsrcdir/"..."
		rm -rf "$fngsrcdir" 2>/dev/null;
		mkdir --parents "$fngsrcdir";
		cd "$fngsrcdir";
		[[ ! $(umask) == 0022 ]] && umask 0022;
		#generate setup command list
		for task in "${FNG_SETUP_tasks[@]}";do
			task=$(_replace_tokens "$task");	#replace tokens
			setuptasks+=("$task");
		done
		( eval "${setuptasks[@]}" ) 2>&1;
	else
		echo -e "$CTNG_ROOT_BUILD_ERROR$CTNG_ROOT_BUILD_CMD";
		sleep 5;
	fi;
	) | tee "$logfile" | "$gui" "$st_" "$bt_" "$title_ - \Z0$pdesc\Zn" "--colors" "--title" " -[ Setup Freetz-NG ]- " "$pb_" "$_lines" "$_cols";
};
_dl(){
	[ -d "$dldir/#tmp" ] && rm --recursive --force "$dldir/#tmp"
	mkdir --parents "$dldir/#tmp";
	cd "$dldir/#tmp";
	wget --content-disposition "$1" 2>&1 | stdbuf -o0 awk '/[.] +[0-9][0-9]?[0-9]?%/ { print substr($0,63,3) }' | "$gui" "$st_" "$bt_" "$title_ - \Z0$pdesc\Zn" "--colors" "--title" " -[ download $2 ]- " --gauge "  $txt_loading $txt_wait" 6 74;
	if [ $? -eq 0 ];then
		fname="$(ls -t | head -n1)"; md5file="$fname.md5";
		md5sum "$fname" > "$md5file";
		cd "$dldir";
		answer=$(md5sum -c "$md5file" 2>/dev/null | awk -F: '{printf $2}');
		[ ! "$answer" == "OK" ] && mv --force "$dldir/#tmp/$fname" "$dldir/$fname";
		rm --recursive --force "$dldir/#tmp";
	fi;
	[ -f "$dldir/$fname" ] && echo "$dldir/$fname";
	exit;
};
_compress(){
	#generate xz-file
	XZ_OPT=-e9 tar -cvJf "$1" -C "$2" .
};
_extract(){
    local c e i;

    (($#)) || return;
	
	edir="$2";
	[ -d "$edir" ] && rm -r "$edir";
	mkdir --parents "$edir";
	
    for i; do
        c='';
        e=1;
		
        if [[ ! -r $i ]];then
            echo "$0: file is unreadable: \`$i'" >&2;
            continue;
        fi
		
        case $i in
			*.tgz|*.tlz|*.txz|*.tb2|*.tbz|*.tbz2|*.taz|*.tar|*.tar.Z|*.tar.bz|*.tar.bz2|*.tar.gz|*.tar.lzma|*.tar.xz)
				   c=(tar -xvf);;
            *.7z)  c=(7z -x);;
            *.Z)   c=(uncompress);;
            *.bz2) c=(bunzip2);;
            *.exe) c=(cabextract);;
            *.gz)  c=(gunzip);;
            *.rar) c=(unrar -x);;
            *.xz)  c=(unxz);;
            *.zip) c=(unzip -o);;
            *)     echo "$0: unrecognized file extension: \`$i'" >&2;
                   continue;;
        esac
		cd "$edir";
		BEFORE=(.*/ */);
		
		command "${c[@]}" "$i" |"$gui" "$st_" "$bt_" "$title_ - \Z0$pdesc\Zn" "--colors" "--title" " -[ $txt_extracting $i ]- " "$pb_" 20 74;
        ((e = e || $?));
		
		AFTER=(.*/ */);
		for (( j = 0; j < "${#BEFORE[@]}"; j++ )); do
			[ "${BEFORE[j]}" == "${AFTER[j]}" ] || break;
		done
		printf "$edir/${AFTER[j]}";
    done
	exit;
};
_replace_tokens(){
	echo -e "$1" | sed -e "s#@TOOLCHAIN@#$tcdir/$tc#g; \
						s#@TEMPLATE@#$cttpldir/$tpl#g; \
						s#@CC@#$compilername#g; \
						s#@RANLIB@#$ranlibname#g; \
						s#@PREFIX@#$prefixdir#g; \
						s#@HOST@#$hostname#g; \
						s#@CTNGSOURCE@#$ctsrcdir#g; \
						s#@FNGSOURCE@#$fngsrcdir#g; \
						s#@VALIDATE@#_check_lib#g; \
						s#@COMPRESS@#_compress#g; \
						s#@CREATECFG@#_create_toolchaincfg#g; \
						s#@LOGFILE@#$logfile#g";
};
_tidy_tasks(){
	echo -e "$1" | sed -e "s#$2"_tasks=\(\""##g; \
						s#$2"_tasks=\(\'"##g; \
						s#$2"_tasks+=\(\""##g; \
						s#$2"_tasks+=\(\'"##g; \
						s#"\"\)\;"##g; \
						s#"\'\)\;"##g;";
};
_get_template_properties(){
	desc="";
	if [ -f "$1" ];then
		if [ -z "$2" ];then
			desc=$(sed -n -e '/#toolchain template/ s/.*\: *//p' "$1" | awk -F'(' '{print $1}' | xargs);
		else
			desc="$2";
		fi;
		[ -z "$desc" ] && desc="missing description"; 

		#extract template properties
		if [ $(_get_template_type "$1") == "CTNG" ];then
			arch=$(grep '^CT_ARCH=' "$1" | awk -F'"' '{print $2}');
			endian=$(grep '^CT_ARCH_ENDIAN=' "$1" | awk -F'"' '{print $2}');
			end=${endian^};
			bitness=$(grep '^CT_ARCH_BITNESS=' "$1" | awk -F'=' '{print $2}');
			[ "$arch" == "arm" ] && [ "$bitness" == "64" ] && arch="aarch64";
			cpu=$(grep '^CT_ARCH_CPU=' "$1" | awk -F'"' '{print $2}') && [ -n "$cpu" ] && cpu=" $cpu";
			aarch=$(grep '^CT_ARCH_ARCH=' "$1" | awk -F'"' '{print $2}') && [ -n "$aarch" ] && aarch=" $aarch";
			cc=$(grep '^CT_CC=' "$1" | awk -F'"' '{print $2}');
			ccv=$(grep -i "CT_${cc}_VERSION=" "$1" | awk -F'"' '{print $2}');
			libc=$(grep '^CT_LIBC=' "$1" | awk -F'"' '{print $2}');
			libcu=$(grep -i "^CT_${libc}_USE=" "$1" | awk -F'"' '{print $2}');
			[ -n "$libcu" ] && libcv=$(grep -i "CT_${libcu}_VERSION=" "$1" | awk -F'"' '{print $2}');
			[ -z "$libcu" ] && libcv=$(grep -i "CT_${libc}_VERSION=" "$1" | awk -F'"' '{print $2}');
			kernel=$(grep '^CT_KERNEL=' "$1" | awk -F'"' '{print $2}');
			kernelv=$(grep -i "CT_${kernel}_VERSION=" "$1" | awk -F'"' '{print $2}');
		elif [ $(_get_template_type "$1") == "FNG" ];then
			if [ -d "$fngsrcdir" ];then
				cp "$1" "$fngsrcdir/.config";
				cd "$fngsrcdir";
				[[ ! $(umask) == 0022 ]] && umask 0022;
				make olddefconfig >/dev/null;
				arch=$(grep '^FREETZ_TARGET_ARCH=' ".config" | awk -F'"' '{print $2}');
				bitness=$(grep '^FREETZ_GCC_ABI=' ".config" | awk -F'"' '{print $2}');
				[ $(grep -i '^FREETZ_TARGET_ARCH_BE=y' ".config") ] && end="B" || end="L";
				[ $(grep -i '^FREETZ_LIB_libuClibc=y' ".config") ] && libc="uClibc";
				[ $(grep -i '^FREETZ_LIB_libglibc=y' ".config") ] && libc="glibc";
				[ $(grep -i '^FREETZ_LIB_libumusl=y' ".config") ] && libc="musl";
				libcv=$(grep -i "^FREETZ_TARGET_${libc}_VERSION=" ".config" | awk -F'"' '{print $2}');
				[ $(grep -i '^FREETZ_TARGET_GCC_[0-9]=y' ".config") ] && cc="gcc";
				ccv=$(grep -i "^FREETZ_TARGET_${cc}_MAJOR_VERSION=" ".config" | awk -F'"' '{print $2}').$(grep -i "^FREETZ_TARGET_${cc}_MINOR_VERSION=" ".config" | awk -F'"' '{print $2}');
				kernel='linux';
				kernelv=$(grep -i "^FREETZ_KERNEL_VERSION=" ".config" | awk -F'"' '{print $2}');
				rm -f "$fngsrcdir/.config";
			else
				setup=0;
				desc="$desc (run \Zr<Setup>\ZR to show details)";
			fi;
		fi;

		#build template property string
		[ -z $setup ] && desc="$desc ($arch$cpu$aarch $bitness-bit ${end:0:1}E, $libc $libcv, $cc $ccv, $kernel $kernelv)";
	fi;
	echo $desc;
	[ -n "$desc" ] && exit 0 || exit 1;
};
_get_template_type(){
	if [ $(grep -c '^FREETZ_' "$1") -gt 0 ];then
		echo "FNG";
	else
		echo "CTNG";
	fi;
};
_get_version(){
	r="";
	if [ -f "$1" ];then
		content=$(cat "$1");
		ver=$(echo "$content" | grep 'Version:' | sed -e "s/Version: //g");
		if [ -z "$2" ];then
			r="$ver";
		else
			(echo "$ver" | grep -qc "$2") && r="$ver";
		fi;
	fi;
	echo $r;
	[ ${#r} -gt 0 ] && exit 0 || exit 1;
};
_compare_version(){

	min=$(printf "$1\n$2\n" | sort -V | head -n1);
	max=$(printf "$1\n$2\n" | sort -V | tail -n1);
	
	[ $min == $max ] && printf '=' && return;
	[ $1 == $max ] && printf '>' && return;
	[ $1 == $min ] && printf '<' && return;
};
_paktc_timer(){
if [ "$1" == "0" ] || [ "${#1}" -eq 0 ];then
	read -n 1 -s -r -p "Press any key to continue";
else
	for (( i=$1; i>0; i--)); do
		sp=$(printf '%*s' $[$1-$i+1] | tr ' ' '.');
		printf "\rPress any key to continue$sp"
		read -s -n 1 -t 1 key
		if [ $? -eq 0 ]
		then
			break
		fi;
	done
fi;
echo -e "\033[2K\r"; #remove characters from console
};
_check_toolchain(){
	
	if [ -z "$1" ];then	#toolchain parameter empty
		echo -e "\n\n$r_l  $txt_error:$y_l Parameter$w_l Toolchain not set!""$rs_";
		return 1;
	elif [ "$1" == "native" ];then	#toolchain native not supported
		echo -e "\n\n$r_l  $txt_error:$y_l $1$w_l Toolchain library update not supported!""$rs_";
		return 1;
	elif [ ! -d "$tcdir/$1/bin" ];then	#toolchain not installed
		echo -e "\n\n$r_l  $txt_error:$y_l $1$w_l Toolchain $txt_n_installed""$rs_";
		return 1;
	else
		return 0;
	fi;
};
_check_root(){
	! ((${EUID:-0} || "$(id -u)"));
};
_check_lib(){
	case "$1" in
		"PCSC")	#Create symlink to the PCSC header files, if the last include path of the compiler don't point to it
				echo -e "\nCheck for PCSC header files and try to symlink to the correct PCSC header files if the last compiler include path points to the wrong location...";
				if [ ${#incdir} -gt 0 ] && [ ! -d "$incdir/PCSC" ];then
					headerdir="$(dirname $(find "$prefixdir" -type f -name "pcsclite.h" | head -n 1))";
					[ ${#headerdir} -gt 0 ] && ln -s "$(realpath --relative-to="$incdir" "$headerdir")" "$incdir/PCSC";
					[ ${#headerdir} -gt 0 ] && echo "Symlink $incdir/PCSC -> $headerdir created, to point to the PCSC header files." || "No PCSC header files found in $prefixdir and it's sub directories!";
				else
					[ ${#incdir} -gt 0 ] && echo "PCSC header files are in the correct location: $incdir/PCSC" || echo "Compiler returns no include directories!";
				fi;;
		*) echo "not implemented yet!";
	esac;
};
_check_pkg(){
	pkgs=( git patch curl jq gcc g++ gperf bison flex makeinfo help2man make file cmp \
		  python3-config autoconf automake libtoolize libtool gawk wget bzip2 xz unzip rsync \
		  composite inkscape pkg-config python gettext ruby );
	headers=( ncurses libacl.h sys/capability.h readline.h glib-2.0/glib.h );
	libs=( libstdc++.so.6 libstdc++.a libc\\.a );
	if syscheck "" "" "${pkgs[*]}" "${headers[*]}" "${libs[*]}";then
		echo -e "$r_l""\nCHECK -> You need to manually install the following packages to use this plugin properly:\n"$y_l"$prefix install$packages\n""$re_" && _paktc_timer 10;
	fi;
};
_check_github_api_limits(){
	
	limit=$(curl --silent "https://api.github.com/rate_limit" | jq -r '.resources.core.limit');
	remaining=$(curl --silent "https://api.github.com/rate_limit" | jq -r '.resources.core.remaining');
	reset=$(curl --silent "https://api.github.com/rate_limit" | jq -r '.resources.core.reset');
	reset_time=$(date -d @$reset);
	
	if [ "$remaining" -lt "$1" ];then
		echo -e "$y_l""NOTE -> Please wait until "$g_l"$reset_time"$y_l" to reset your configuration file."\
					"The most recent versions and download links for the libraries are determined dynamically via the Github API."\
					"Exceeding the rate limit on Github API will result in failures on generationg the configuration file."\
					"Your Github API rate limit will be reset soon on $reset_time."\
					"\nFor "$b_l"unauthenticated requests"$y_l", the rate limit allows for "$b_l"up to $limit requests per hour"$y_l". Unauthenticated requests are associated with the originating IP address, and not the user making requests."\
					"\n$re_";
		return 0;
	else
		return 1;
	fi;
};
_check_crosstool_setup(){
	#Setup crosstool-NG automatically if not installed
	if [ "$1" == "CTNG" ] || [ -z "$1" ];then
		if [ ! -f "$ctsrcdir/ct-ng" ];then
			clear;
			echo -e "$r_l""\nCHECK -> crosstool-NG is not setup correctly. Try to fix it automatically...\n""$re_";
			[ -z "$1" ] && _paktc_timer 5;
			_ctng_setup "$CTNG_START_BUILD";
		fi;
	fi;

	#Setup Freetz-NG automatically if not installed
	if [ "$1" == "FNG" ] || [ -z "$1" ];then
		if [ ! -d "$fngsrcdir/dl" ];then
			clear;
			echo -e "$r_l""\nCHECK -> Freetz-NG is not setup correctly. Try to fix it automatically...\n""$re_";
			[ -z "$1" ] && _paktc_timer 5;
			_fng_setup "$CTNG_START_BUILD";
		fi;
	fi;
};
_check_config(){
	nok=0;
	[ -z ${FNG_REPO_URL+x} ] && nok=1;
	[ -z ${CTNG_CONFIG_tasks+x} ] && nok=1;
	[ -z ${CTNG_BUILD_AS_ROOT+x} ] && nok=1;
	[ -z ${LIBS+x} ] && nok=1;
	
	if [ $nok -eq 1 ];then 
		clear;
		echo -e "$r_l""\nCHECK -> Your config file seems to be outdated. Please restart s3 as follows to recreate an updated config file:\n"$y_l"./s3 tcupdate -r\n""$re_";
		_paktc_timer 10;
		return $nok;
	fi;
};	
_change_config(){
	nok=1;
	ts="$(date +%F %T)";
	[[ ! $2 =~ "(" ]] && [[ ! $string =~ ")" ]] && qte="\"" || qte=""; #no quotes if value contains parentheses
	
	if ! grep -Eq "^$1=.*" "$configname";then
		echo -e "$r_l""\nCHECK -> Variable "$y_l"$1"$r_l" does not exist in the configuration file!\n""$re_";
		_paktc_timer 10;
	elif [ "${1:(-6)}" == "_tasks" ];then
		echo -e "$r_l""\nCHECK -> Modifying "$y_l"tasks-variables"$r_l" not implemented yet!\n""$re_";
		_paktc_timer 10;
	else
		cp -f "$configname" "$configname.$(date +"%Y%m%d%H%M%S")"
		sed -i "s#^$1=.*#$1=$qte$2$qte; \#changed on $ts via tcupdate commandline#g" "$configname";
		result=$(grep -E "^$1=.*" "$configname" | awk '{printf $1}');
		echo -e "$g_l""\nDONE -> Variable changed to: "$y_l"$result\n""$re_";
		_paktc_timer 5;
		nok=0;
	fi;

	return $nok;
};
_create_config(){
	#check existing jq
	if [ ! $(which jq) ];then
		echo -e "$r_l""\nCHECK -> Without the tool 'jq' automatic config file generation is not possible. Please install it first:\n"$y_l"apt install jq\n""$re_" && _paktc_timer 10;
		return 1;
	fi;
	
	ctng_config_tasks=( "('./ct-ng menuconfig;')"
						"('TPL_SAVE=\$(\$gui --defaultno --output-fd 1 --ok-label \"Yes\" --cancel-label \"No\" --colors \$bt_ \"\$title_ - \Z0\$pdesc\Zn\" --title \"-[ Save Cross Toolchain Template ]-\" --inputbox \"\\\nWould you like to \ZrSAVE\ZR this toolchain template \Zrnow\ZR?\" 10 55 \"@TEMPLATE@\") && cp \"\$ctsrcdir/.config\" \"\$TPL_SAVE\";')" );
	ctng_config_tasks_comment="#config command";
	
	ctng_build_tasks=( "('./ct-ng show-config | tee -a \"@LOGFILE@\";')"
					   "('./ct-ng build;')" );
	ctng_build_tasks_comment="#build command";
	
	ctng_setup_tasks=( "('git clone --progress \"\$CTNG_REPO_URL\" \"@CTNGSOURCE@\";')"
					   "('./bootstrap;')"
					   "('./configure --enable-local;')"
					   "('make;')" );
	ctng_setup_tasks_comment="#setup command";
	
	fng_config_tasks=( "('make menuconfig;')"
						"('TPL_SAVE=\$(\$gui --defaultno --output-fd 1 --ok-label \"Yes\" --cancel-label \"No\" --colors \$bt_ \"\$title_ - \Z0\$pdesc\Zn\" --title \"-[ Save Cross Toolchain Template ]-\" --inputbox \"\\\nWould you like to \ZrSAVE\ZR this toolchain template \Zrnow\ZR?\" 10 55 \"@TEMPLATE@\") && cp \"\$fngsrcdir/.config\" \"\$TPL_SAVE\";')" );
	fng_config_tasks_comment="#config command";
	
	fng_build_tasks=( "('make olddefconfig | tee -a \"@LOGFILE@\";')"
					  "('make toolchain-dirclean | tee -a \"@LOGFILE@\";')"
					  "('make toolchain | tee -a \"@LOGFILE@\";')" );
	fng_build_tasks_comment="#build command";
	
	fng_setup_tasks=( "('git clone --progress \"\$FNG_REPO_URL\" \"@FNGSOURCE@\";')"
					  "('ln -s \"../../downloads\" \"@FNGSOURCE@/dl\";')" );
	fng_setup_tasks_comment="#setup command";
	
	lib_comments=(	"#Enable/Disable (1|0)"
					"#Displayname"
					"#Versionnumber"
					"#Filename and optional version number to check in pkgconfig folder for an existing library to get version information"
					"#Valid URL for downloading sources of library\n#List of build commands below. Pay attention to the SEMICOLON at the end of EACH\n#command and the correct quoting (' or \") for or to avoid expansion of variables.\n#Tokens @TOOLCHAIN@, @CC@, @RANLIB@, @PREFIX@, @HOST@, @VALIDATE@, @LOGFILE@ are replaced automatically."
					"#build command" );
	lib_settings=( "" name version check url tasks );
	lib_keys=( SAMPLE_LIB SSL_111 SSL_110 SSL_102 SSL_100 SSL_098 LIB_USB LIB_PCSC LIB_ZLIB );
	lib_names=( "SampleLib" "OpenSSL" "OpenSSL" "OpenSSL" "OpenSSL" "OpenSSL" "libusb" "PCSC-Lite" "zlib" );
	lib_versions=(	"0.2.9sl"
					"$(curl --silent "https://api.github.com/repos/openssl/openssl/tags?page=1&per_page=100" | jq '[.[] | select(.name|test("OpenSSL_1_1_1[a-z].*"))][0] | .name' | sed -e 's#OpenSSL_##g; s#_#.#g; s#\"##g')"
					"$(curl --silent "https://api.github.com/repos/openssl/openssl/tags?page=1&per_page=100" | jq '[.[] | select(.name|test("OpenSSL_1_1_0[a-z].*"))][0] | .name' | sed -e 's#OpenSSL_##g; s#_#.#g; s#\"##g')"
					"$(curl --silent "https://api.github.com/repos/openssl/openssl/tags?page=1&per_page=100" | jq '[.[] | select(.name|test("OpenSSL_1_0_2[a-z].*"))][0] | .name' | sed -e 's#OpenSSL_##g; s#_#.#g; s#\"##g')"
					"$(curl --silent "https://api.github.com/repos/openssl/openssl/tags?page=2&per_page=100" | jq '[.[] | select(.name|test("OpenSSL_1_0_0[a-z].*"))][0] | .name' | sed -e 's#OpenSSL_##g; s#_#.#g; s#\"##g')"
					"$(curl --silent "https://api.github.com/repos/openssl/openssl/tags?page=2&per_page=100" | jq '[.[] | select(.name|test("OpenSSL_0_9_8[a-z].*"))][0] | .name' | sed -e 's#OpenSSL_##g; s#_#.#g; s#\"##g')"
					"$(curl --silent "https://api.github.com/repos/libusb/libusb/releases/latest" | jq -r '.tag_name' | cut -c 2-)"
					"$(curl --silent https://salsa.debian.org/api/v4/projects/19181/repository/tags | jq -r '.[0].name' | awk -F '[/-]' '{printf $2}')"
					"$(curl --silent https://api.github.com/repos/madler/zlib/tags | jq -r '.[0].name' | cut -c 2-)" );
	lib_checks=( "samplelib.pc" "openssl.pc" "openssl.pc" "openssl.pc" "openssl.pc" "openssl.pc" "libusb-1.0.pc" "libpcsclite.pc" "zlib.pc" );
	lib_urls=(	"https://sampleurl.com/archive.tar.bz"
				"$(curl --silent "https://api.github.com/repos/openssl/openssl/tags?page=1&per_page=100" | jq '[.[] | select(.name|test("OpenSSL_1_1_1[a-z].*"))][0] | .tarball_url' | sed -e 's#\"##g')"
				"$(curl --silent "https://api.github.com/repos/openssl/openssl/tags?page=1&per_page=100" | jq '[.[] | select(.name|test("OpenSSL_1_1_0[a-z].*"))][0] | .tarball_url' | sed -e 's#\"##g')"
				"$(curl --silent "https://api.github.com/repos/openssl/openssl/tags?page=1&per_page=100" | jq '[.[] | select(.name|test("OpenSSL_1_0_2[a-z].*"))][0] | .tarball_url' | sed -e 's#\"##g')"
				"$(curl --silent "https://api.github.com/repos/openssl/openssl/tags?page=2&per_page=100" | jq '[.[] | select(.name|test("OpenSSL_1_0_0[a-z].*"))][0] | .tarball_url' | sed -e 's#\"##g')"
				"$(curl --silent "https://api.github.com/repos/openssl/openssl/tags?page=2&per_page=100" | jq '[.[] | select(.name|test("OpenSSL_0_9_8[a-z].*"))][0] | .tarball_url' | sed -e 's#\"##g')"
				"$(curl --silent "https://api.github.com/repos/libusb/libusb/releases/latest" | jq -r '.assets[1].browser_download_url')"
				"$(echo 'https://salsa.debian.org/api/v4/projects/19181/repository/archive.tar.bz2?sha='$(curl --silent https://salsa.debian.org/api/v4/projects/19181/repository/tags | jq -r '.[0].commit.id'))"
				"$(curl --silent https://api.github.com/repos/madler/zlib/tags | jq -r '.[0].tarball_url')" );
	lib_tasks=(	'( "('"'"'export TOOLCHAIN=@TOOLCHAIN@;'"'"')" "('"'"'export CC=@CC@;'"'"')" "('"'"'export RANLIB=@RANLIB@;'"'"')" "('"'"'export PATH=\"\$TOOLCHAIN/bin:\$PATH\";'"'"')" "('"'"'./Configure --prefix=@PREFIX@/ --host=@HOST@ linux-generic32 shared;'"'"')" "('"'"'make;'"'"')" "('"'"'make install;'"'"')" )'
				'( "('"'"'export TOOLCHAIN=@TOOLCHAIN@;'"'"')" "('"'"'export CC=@CC@;'"'"')" "('"'"'export RANLIB=@RANLIB@;'"'"')" "('"'"'export PATH=\"\$TOOLCHAIN/bin:\$PATH\";'"'"')" "('"'"'./Configure --prefix=@PREFIX@/ linux-generic32 shared;'"'"')" "('"'"'make;'"'"')" "('"'"'make install;'"'"')" )'
				'( "('"'"'export TOOLCHAIN=@TOOLCHAIN@;'"'"')" "('"'"'export CC=@CC@;'"'"')" "('"'"'export RANLIB=@RANLIB@;'"'"')" "('"'"'export PATH=\"\$TOOLCHAIN/bin:\$PATH\";'"'"')" "('"'"'./Configure --prefix=@PREFIX@/ linux-generic32 shared;'"'"')" "('"'"'make;'"'"')" "('"'"'make install;'"'"')" )'
				'( "('"'"'export TOOLCHAIN=@TOOLCHAIN@;'"'"')" "('"'"'export CC=@CC@;'"'"')" "('"'"'export RANLIB=@RANLIB@;'"'"')" "('"'"'export PATH=\"\$TOOLCHAIN/bin:\$PATH\";'"'"')" "('"'"'./Configure --prefix=@PREFIX@/ linux-generic32 shared;'"'"')" "('"'"'make;'"'"')" "('"'"'make install SHLIB_VERSION_NUMBER=1.0.2 SHLIB_MINOR=0.2;'"'"')" )'
				'( "('"'"'export TOOLCHAIN=@TOOLCHAIN@;'"'"')" "('"'"'export CC=@CC@;'"'"')" "('"'"'export RANLIB=@RANLIB@;'"'"')" "('"'"'export PATH=\"\$TOOLCHAIN/bin:\$PATH\";'"'"')" "('"'"'[ \$(echo -e \"\$_tc_info\" | grep -ic \"musl\") -gt 0 ] && echo \"Apply the musl libc patch to avoid OpenSSL build errors due to missing termio.h...\" && curl --silent \"https://raw.githubusercontent.com/beagleboard/buildroot/master/package/openssl/openssl-004-musl-termios.patch\" | patch -p1;'"'"')" "('"'"'./Configure --prefix=@PREFIX@/ linux-generic32 shared;'"'"')" "('"'"'make;'"'"')" "('"'"'make install;'"'"')" )'
				'( "('"'"'export TOOLCHAIN=@TOOLCHAIN@;'"'"')" "('"'"'export CC=@CC@;'"'"')" "('"'"'export RANLIB=@RANLIB@;'"'"')" "('"'"'export PATH=\"\$TOOLCHAIN/bin:\$PATH\";'"'"')" "('"'"'[ \$(echo -e \"\$_tc_info\" | grep -ic \"musl\") -gt 0 ] && echo \"Apply the musl libc patch to avoid OpenSSL build errors due to missing termio.h...\" && curl --silent \"https://raw.githubusercontent.com/beagleboard/buildroot/master/package/openssl/openssl-004-musl-termios.patch\" | patch -p1;'"'"')" "('"'"'./Configure --prefix=@PREFIX@/ linux-generic32 shared;'"'"')" "('"'"'make;'"'"')" "('"'"'make install;'"'"')" )'
				'( "('"'"'export TOOLCHAIN=@TOOLCHAIN@;'"'"')" "('"'"'export CC=@CC@;'"'"')" "('"'"'export PATH=\"\$TOOLCHAIN/bin:\$PATH\";'"'"')" "('"'"'./configure --prefix=@PREFIX@/ --host=@HOST@ --disable-udev;'"'"')" "('"'"'make;'"'"')" "('"'"'make install;'"'"')" )'
				'( "('"'"'export TOOLCHAIN=@TOOLCHAIN@;'"'"')" "('"'"'export CC=@CC@;'"'"')" "('"'"'export PATH=\"\$TOOLCHAIN/bin:\$PATH\";'"'"')" "('"'"'./configure --prefix=@PREFIX@/ --host=@HOST@ --disable-libudev --disable-libsystemd --with-systemdsystemunitdir=@PREFIX@/lib/systemd/system LIBUSB_LIBS=\"-L@PREFIX@/lib -lusb-1.0 -lrt\" LIBUSB_CFLAGS=\"-I@PREFIX@/include/libusb-1.0\";'"'"')" "('"'"'make;'"'"')" "('"'"'make install;'"'"')" "('"'"'@VALIDATE@ \"PCSC\";'"'"')" )'
				'( "('"'"'export TOOLCHAIN=@TOOLCHAIN@;'"'"')" "('"'"'export CC=@CC@;'"'"')" "('"'"'export PATH=\"\$TOOLCHAIN/bin:\$PATH\";'"'"')" "('"'"'./configure --prefix=@PREFIX@/;'"'"')" "('"'"'make;'"'"')" "('"'"'make install;'"'"')" )' );

	echo '#CROSS toolchain build settings'	 						 						 				 				 >"$configname";
	echo 'CTNG_REPO_URL="https://github.com/crosstool-ng/crosstool-ng"; #Repository to load ct-ng from'	 					>>"$configname";
	echo 'CTNG_BUILD_AS_ROOT="0"; #Enable/Disable (1|0); You normally do *not* need to be root to build a toolchain using crosstool-NG. In fact, it is *VERY* dangerous to run as root, as crosstool-NG will, as part of the build process, remove a few directories. If anything goes wrong, running as root can ruin your host distribution.' >>"$configname";
	echo '#List of build and setup commands below. Pay attention to the SEMICOLON at the end of EACH'	 					>>"$configname";
	echo '#command and the correct quoting ('"'"' or ") for or to avoid expansion of variables.'	 						>>"$configname";
	echo '#Tokens @CTNGSOURCE@, @LOGFILE@, @TEMPLATE@, @COMPRESS@, @CREATECFG@ are replaced automatically. The commands are executed in the context of the current user.'	>>"$configname";
	i=0;
	for ct in "${ctng_config_tasks[@]}";
	do
		echo -e "CTNG_CONFIG_tasks"$([ "$i" -gt "0" ] && echo "+")"=$ct; $ctng_config_tasks_comment$(($i+1))"					>>"$configname";
		((i++));
	done;
	i=0;
	for bt in "${ctng_build_tasks[@]}";
	do
		echo -e "CTNG_BUILD_tasks"$([ "$i" -gt "0" ] && echo "+")"=$bt; $ctng_build_tasks_comment$(($i+1))"					>>"$configname";
		((i++));
	done;
	i=0;
	for st in "${ctng_setup_tasks[@]}";
	do
		echo -e "CTNG_SETUP_tasks"$([ "$i" -gt "0" ] && echo "+")"=$st; $ctng_setup_tasks_comment$(($i+1))"					>>"$configname";
		((i++));
	done;
	
	echo -e '\nFNG_REPO_URL="https://github.com/Freetz-NG/freetz-ng.git"; #Repository to load freetz-ng from'					>>"$configname";
	i=0;
	for ct in "${fng_config_tasks[@]}";
	do
		echo -e "FNG_CONFIG_tasks"$([ "$i" -gt "0" ] && echo "+")"=$ct; $fng_config_tasks_comment$(($i+1))"					>>"$configname";
		((i++));
	done;
	i=0;
	for bt in "${fng_build_tasks[@]}";
	do
		echo -e "FNG_BUILD_tasks"$([ "$i" -gt "0" ] && echo "+")"=$bt; $fng_build_tasks_comment$(($i+1))"					>>"$configname";
		((i++));
	done;
	i=0;
	for st in "${fng_setup_tasks[@]}";
	do
		echo -e "FNG_SETUP_tasks"$([ "$i" -gt "0" ] && echo "+")"=$st; $fng_setup_tasks_comment$(($i+1))"					>>"$configname";
		((i++));
	done;
	
	echo -e '\n#LIBRARY update build settings\n#List of ordered libraries. Only libraries in this list are available'		>>"$configname";
	echo "LIBS=(${lib_keys[@]});"																							>>"$configname";

	i=0;
	for key in "${lib_keys[@]}";
	do
		for setting in "${lib_settings[@]}";
		do
			case "$setting" in
				"")   		if [ -z $setting ];then
								echo -e "\n#"${lib_names[$i]}" "${lib_versions[$i]}""		>>"$configname";
							fi;
							echo -e "$key"$([ ! -z $setting ] && echo "_")"$setting""=\"$([ "$key" == "SAMPLE_LIB" ] && echo '0' || echo '1')\";$([ "$i" -eq "0" ] && echo " ${lib_comments[0]}")"	>>"$configname";;
				"name")   	echo -e "$key"$([ ! -z $setting ] && echo "_")"$setting""=\"${lib_names[$i]}\";$([ "$i" -eq "0" ] && echo " ${lib_comments[1]}")"		>>"$configname";;
				"version")	echo -e "$key"$([ ! -z $setting ] && echo "_")"$setting""=\"${lib_versions[$i]}\";$([ "$i" -eq "0" ] && echo " ${lib_comments[2]}")"	>>"$configname";;
				"check")	[ $(echo -e "$key" | grep -c "SSL_\|SAMPLE_") -gt 0 ] && chk="$(echo -e "${lib_checks[$i]} $(echo ${lib_versions[$i]} | sed -e 's/[a-zA-Z]//g')")" || chk="${lib_checks[$i]}";
							echo -e "$key"$([ ! -z $setting ] && echo "_")"$setting""=\"$chk\";$([ "$i" -eq "0" ] && echo " ${lib_comments[3]}")"	>>"$configname";;
				"url")		echo -e "$key"$([ ! -z $setting ] && echo "_")"$setting""=\"${lib_urls[$i]}\";$([ "$i" -eq "0" ] && echo " ${lib_comments[4]}")"		>>"$configname";;
				"tasks")	unset tasks;j=0;
							declare -a tasks="${lib_tasks[$i]}"
							for t in "${tasks[@]}";
							do
								echo -e "$key"$([ ! -z $setting ] && echo "_")"$setting"$([ "$j" -gt "0" ] && echo "+")"=$t;$([ "$i" -eq "0" ] && echo " ${lib_comments[5]}$(($j+1))")"	>>"$configname";
								((j++));
							done;;
			esac;
		done;
		((i++))
	done;

	return 0;
};
_create_toolchaincfg(){
	cd "$1/bin";
	compilername="$3""-gcc";compilername=$(realpath -s $compilername);
	sr=$("$compilername" -print-sysroot 2>/dev/null);
	sr=$(realpath -sm "$sr" 2>/dev/null);
	if [ ${#sr} -eq 0 ];then
		sysroot="$4";
	else
		sysroot="${sr#"$1/"}";
	fi;
	[ ${#5} -gt 0 ] && lsd="$5" || lsd="/usr/lib";
	[ ${#7} -gt 0 ] && info="$7" || info="$(echo -e "\\\n
!!! crosstool-NG Toolchain !!!\\\n
\\\n
$(echo "$6" | awk -F'[()]' '{print $1}' | xargs)\\\n
$(echo "$6" | awk -F'[()]' '{print $2}' | xargs)\\\n")";
	
	cd "$tccfgdir";
	cat << EOF > $2
_toolchainname="$2";
default_use="USE_UTF8 USE_LIBCRYPTO";
_description="$(echo "$6" | awk -F'[()]' '{print $1}' | xargs)";
_oscamconfdir_default="/etc/tuxbox/config";
_oscamconfdir_custom="";
_self_build="$([ ! "$9" == "yes" ] && echo "no" || echo "$9")";
_compiler="$3-";
_sysroot="$sysroot";
_libsearchdir="$lsd";
_toolchainfilename="$(echo -en "$(basename "${8%..*}")" | base64)";
_md5sum="$(cd "$dldir" && md5sum $(basename "${8%..*}"))";
_tc_info="$info";
_tc_infolines="5";
EOF

};
